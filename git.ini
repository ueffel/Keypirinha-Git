#
# Git Package configuration file
#

[main]
# Plugin's main configuration section.

# Path to git executable which is use to execute git commands
#
# Defaults to "git", meaning to the git executable in the %PATH%
# Examples:
#   git_exe = C:\Git\bin\git.exe
#
# Default: git
#git_exe = git


# The [scan_path/*] sections
#
# In these sections you can define paths to be scanned for git repositories
# which will be listed in keypirinha
# Each [scan_path/NAME] section has the following settings to determine where
# to scan for git repositories
# * paths:    (required) multi-line setting of directory paths to recursively
#                     scan
# * depth:    (optional) integer that controls the maximum scan depth for each
#                     path.
#                     * '-1' means there is no limit to the scan depth, so the
#                       all sub directories of the paths are recursively scanned
#                     * '0' means only the direct content of the directory is
#                       scanned
#                     * A positive integer specifies the limit for depth level
#                       in the filesystem hierarchy. If the limit is reached the
#                       scanning won't dive deeper in the sub directories
#                     Defaults to -1
# * excludes: (optional) multi-line setting of glob patterns to exclude. Git
#   repositories that match the pattern will not be listed in keypirinha.
#
# Examples:
#
# Scan some paths
# [scan_path/ProgammingStuff]
# paths =
#     C:\dev
#     D:\dev
# depth = 3
#
# To scan the entire %GOPATH% enviroment variable but exclude everything from
# github.com
# [scan_path/MyGolangStuff]
# paths =
#     ${env:GOPATH}\src
# excludes =
#     **\src\github.com\**


# The [cmd/*] sections
#
# * Each [cmd/NAME] represents a command that is executed on a single git
#   repository
# * If you need to include a brace character in the literal text of a settings
#   with placeholder support, it can be escaped by doubling: {{ and }}
# * The following settings can be set in each section:
#   * label:    (required) name of the command, displayed and searchable in
#                          keypirinha
#   * cmd:      (required) name or path of the executable to call
#   * args:     (optional) command line parameters to call the executable with.
#                          Defaults to '"{repo_path}"'
#                          Supported placeholders:
#                          * {repo_path}: Path to the currently selected git
#                                         repository
#   * cwd:      (optional) working directory to call the executable in.
#                          Supported placeholders:
#                          * {repo_path}: Path to the currently selected git
#                                         repository
#   * internal: (optional) boolean to decide if the executable called
#                          internally ('yes') or externally ('no').
#                          Internally means that STDOUT and STDERR are
#                          redirected to the keypirinha console and there is
#                          no visible window (it's meant for git command line
#                          calls)
#                          Defaults to 'no'

[cmd/Explorer]
label = Open Explorer
cmd = explorer.exe

[cmd/Fork]
label = Open in Fork
cmd = ${var:KNOWNFOLDER_LOCALAPPDATA}\Fork\Fork.exe

[cmd/GitExtensions]
label = Open in GitExtensions
cmd = ${var:KNOWNFOLDER_PROGRAMFILESX86}\GitExtensions\GitExtensions.exe
args = browse "{repo_path}"

[cmd/GitAhead]
label = Open in GitAhead
cmd = ${var:KNOWNFOLDER_PROGRAMFILES}\GitAhead\GitAhead.exe

[cmd/gitg]
label = Open in gitg
cmd = ${var:KNOWNFOLDER_PROGRAMFILES}\gitg\bin\gitg.exe

[cmd/SublimeMerge]
label = Open in Sublime Merge
cmd = ${var:KNOWNFOLDER_PROGRAMFILES}\Sublime Merge\sublime_merge.exe

[cmd/VSCode]
label = Open in VSCode
cmd = ${var:KNOWNFOLDER_PROGRAMFILES}\Microsoft VS Code\Code.exe

[cmd/Git Fetch]
label = Fetch all remotes
cmd = {git_exe}
args = fetch --all
cwd = {repo_path}

[cmd/Git GC]
label = Run garbage collection
cmd = {git_exe}
args = gc
cwd = {repo_path}


# The [cmd_all/*] sections
#
# * Each [cmd_all/NAME] represents a command that is executed on all git
#   repositories
# * It works a lot like the [cmd/*] section, the difference is, that the
#   working directory is always set to the git repository path
# * If you need to include a brace character in the literal text of a settings
#   with placeholder support, it can be escaped by doubling: {{ and }}
# * The following settings can be set in each section:
#   * label:    (required) name of the command, displayed and searchable in
#                          keypirinha
#   * cmd:      (required) name or path of the executable to call
#                          Supported placeholders:
#                          * {git_exe}: Path to git executable configured above
#   * args:     (optional) command line parameters to call the executable with.
#                          Empty per default
#                          Supported placeholders:
#                          * {repo_path}: Path to the git repository
#   * internal: (optional) boolean to decide if the executable called
#                          internally ('yes') or externally ('no').
#                          Internally means that STDOUT and STDERR are
#                          redirected to the keypirinha console and there is
#                          no visible window (it's meant for git command line
#                          calls)
#                          Defaults to 'no'

[cmd_all/Git Fetch All]
label = Git: Fetch all remotes on all repositories
cmd = {git_exe}
args = fetch --all

[cmd_all/Git GC Auto]
label = Git: Run automatic garbage collection on all Git Repositories
cmd = {git_exe}
args = gc --auto
internal = yes

[cmd_all/Git Status]
label = Git Status on all repositories
cmd = {git_exe}
args = status
internal = yes

# The [file/*] sections
#
# * Each [file/NAME] searches for special files in a git repository to open
#   directly from keypirinha
# * A good example are Visual Studio solution files "*.sln", that are typically
#   in the root of a git repository and can be search for and then opened
#   directly from keypirinha
# * Each section has one single setting:
#   * pattern: (required) multi-line setting with glob search patterns
#                         ('**' for recursive search in subdirectories is
#                         supported, but discouraged for performance reasons)

[file/VS]
pattern = *.sln

[file/Buildscript]
pattern =
    build*.cmd
    build*.bat
    make*.cmd
    make*.bat
